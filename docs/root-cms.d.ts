/** Root.js CMS types. This file is autogenerated. */

export interface RootCMSFile {
  src: string;
  width?: number;
  height?: number;
  alt?: string;
}

export type RootCMSImage = RootCMSFile;

export type RootCMSOneOf<T = any> = T;

export interface RootCMSRichTextBlock {
  type: string;
  data: any;
}

export interface RootCMSRichText {
  blocks: RootCMSRichTextBlock[];
}

export interface RootCMSReference {
  /** The id of the doc, e.g. "Pages/foo-bar". */
  id: string;
  /** The collection id of the doc, e.g. "Pages". */
  collection: string;
  /** The slug of the doc, e.g. "foo-bar". */
  slug: string;
}

export interface RootCMSDoc<Fields extends {}> {
  /** The id of the doc, e.g. "Pages/foo-bar". */
  id: string;
  /** The collection id of the doc, e.g. "Pages". */
  collection: string;
  /** The slug of the doc, e.g. "foo-bar". */
  slug: string;
  /** System-level metadata. */
  sys: {
    createdAt: number;
    createdBy: string;
    modifiedAt: number;
    modifiedBy: string;
    firstPublishedAt?: number;
    firstPublishedBy?: string;
    publishedAt?: number;
    publishedBy?: string;
    locales?: string[];
  };
  /** User-entered field values from the CMS. */
  fields?: Fields;
}

/** Generated from `/blocks/ButtonsBlock/ButtonsBlock.schema.ts`. */
export interface ButtonsBlockFields {
  /** Block Options */
  options?: string[];
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/blocks/CodeBlock/CodeBlock.schema.ts`. */
export interface CodeBlockFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Language */
  language?: string;
  /** Code */
  code?: string;
}

/** Generated from `/blocks/CopyBlock/CopyBlock.schema.ts`. */
export interface CopyBlockFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Title Size */
  titleSize?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
}

/** Generated from `/blocks/ImageBlock/ImageBlock.schema.ts`. */
export interface ImageBlockFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
  /** Caption. Optional caption that displays below the image. */
  caption?: string;
  /** Advanced. These fields are optional. */
  advanced?: {
    /** Max Width. e.g. 300px */
    maxWidth?: string;
    /** Bordered? */
    bordered?: boolean;
  };
}

/** Generated from `/collections/BlogPosts.schema.ts`. */
export interface BlogPosts_ButtonsBlock {
  _type: 'ButtonsBlock';
  /** Block Options */
  options?: string[];
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/collections/BlogPosts.schema.ts`. */
export interface BlogPosts_CodeBlock {
  _type: 'CodeBlock';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Language */
  language?: string;
  /** Code */
  code?: string;
}

/** Generated from `/collections/BlogPosts.schema.ts`. */
export interface BlogPosts_CopyBlock {
  _type: 'CopyBlock';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Title Size */
  titleSize?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
}

/** Generated from `/collections/BlogPosts.schema.ts`. */
export interface BlogPosts_ImageBlock {
  _type: 'ImageBlock';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
  /** Caption. Optional caption that displays below the image. */
  caption?: string;
  /** Advanced. These fields are optional. */
  advanced?: {
    /** Max Width. e.g. 300px */
    maxWidth?: string;
    /** Bordered? */
    bordered?: boolean;
  };
}

/** Generated from `/collections/BlogPosts.schema.ts`. */
export interface BlogPostsFields {
  /** Meta */
  meta?: {
    /** Title */
    title?: string;
    /** Description. Description for SEO and social shares. */
    description?: string;
    /** Image. Meta image for social shares. Recommended size: 1200x600. */
    image?: RootCMSImage;
  };
  /** Content */
  content?: {
    /** Main content body. Top content body. */
    body?: RootCMSRichText;
    /** Content blocks. Add blocks to embed various content types to the blog. */
    blocks?: RootCMSOneOf<BlogPosts_ButtonsBlock | BlogPosts_CodeBlock | BlogPosts_CopyBlock | BlogPosts_ImageBlock>[];
  };
}

/** Generated from `/collections/BlogPosts.schema.ts`. */
export type BlogPostsDoc = RootCMSDoc<BlogPostsFields>;

/** Generated from `/collections/Guide.schema.ts`. */
export interface Guide_ButtonsBlock {
  _type: 'ButtonsBlock';
  /** Block Options */
  options?: string[];
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/collections/Guide.schema.ts`. */
export interface Guide_CodeBlock {
  _type: 'CodeBlock';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Language */
  language?: string;
  /** Code */
  code?: string;
}

/** Generated from `/collections/Guide.schema.ts`. */
export interface Guide_CopyBlock {
  _type: 'CopyBlock';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Title Size */
  titleSize?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
}

/** Generated from `/collections/Guide.schema.ts`. */
export interface Guide_ImageBlock {
  _type: 'ImageBlock';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
  /** Caption. Optional caption that displays below the image. */
  caption?: string;
  /** Advanced. These fields are optional. */
  advanced?: {
    /** Max Width. e.g. 300px */
    maxWidth?: string;
    /** Bordered? */
    bordered?: boolean;
  };
}

/** Generated from `/collections/Guide.schema.ts`. */
export interface GuideFields {
  /** Meta */
  meta?: {
    /** Title */
    title?: string;
    /** Description. Description for SEO and social shares. */
    description?: string;
    /** Image. Meta image for social shares. Recommended size: 1200x600. */
    image?: RootCMSImage;
    /** Category */
    category?: string;
  };
  /** Content */
  content?: {
    /** Content title. Top content title. */
    title?: string;
    /** Content body. Top content body. */
    body?: RootCMSRichText;
    /** Sections. Each section is added to the Table of Contents. */
    sections?: {
      /** Section: ID. Section ID (for deeplinking). */
      id?: string;
      /** Section: Title. Title for the section. */
      title?: string;
      /** Section: Content body. Main content body for the section. */
      body?: RootCMSRichText;
      /** Section: Blocks. Add blocks to embed various content types to the section. */
      blocks?: RootCMSOneOf<Guide_ButtonsBlock | Guide_CodeBlock | Guide_CopyBlock | Guide_ImageBlock>[];
    }[];
  };
}

/** Generated from `/collections/Guide.schema.ts`. */
export type GuideDoc = RootCMSDoc<GuideFields>;

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_Divider {
  _type: 'Divider';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Spacer. Optional. Vertical spacing above and below the divider. */
  spacer?: {
    /** Desktop Height. Height of the spacer for the desktop layout. If blank, defaults to 80. */
    desktopHeight?: string;
    /** Tablet Height. Height of the spacer for the tablet layout. If blank, defaults to the desktop size. */
    tabletHeight?: string;
    /** Mobile Height. Height of the spacer for the mobile layout. If blank, defaults to the desktop size. */
    mobileHeight?: string;
  };
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_Spacer {
  _type: 'Spacer';
  /** Desktop Height. Height of the spacer for the desktop layout. If blank, defaults to 80. */
  desktopHeight?: string;
  /** Tablet Height. Height of the spacer for the tablet layout. If blank, defaults to the desktop size. */
  tabletHeight?: string;
  /** Mobile Height. Height of the spacer for the mobile layout. If blank, defaults to the desktop size. */
  mobileHeight?: string;
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_ButtonsBlock {
  _type: 'ButtonsBlock';
  /** Block Options */
  options?: string[];
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_CodeBlock {
  _type: 'CodeBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Language */
  language?: string;
  /** Code */
  code?: string;
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_CopyBlock {
  _type: 'CopyBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Title Size */
  titleSize?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_ImageBlock {
  _type: 'ImageBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
  /** Caption. Optional caption that displays below the image. */
  caption?: string;
  /** Advanced. These fields are optional. */
  advanced?: {
    /** Max Width. e.g. 300px */
    maxWidth?: string;
    /** Bordered? */
    bordered?: boolean;
  };
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_Template50x50 {
  _type: 'Template50x50';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Left Section */
  leftSection?: RootCMSOneOf<Pages_ButtonsBlock | Pages_CodeBlock | Pages_CopyBlock | Pages_ImageBlock>;
  /** Right Section */
  rightSection?: RootCMSOneOf<Pages_ButtonsBlock | Pages_CodeBlock | Pages_CopyBlock | Pages_ImageBlock>;
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_TemplateHeadline {
  _type: 'TemplateHeadline';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_TemplateImage {
  _type: 'TemplateImage';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_TemplateJumplinks {
  _type: 'TemplateJumplinks';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Description. Required. Accessibility description for screen readers. */
  description?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Title. Optional headline title. */
  title?: string;
  /** Links */
  links?: {
    label?: string;
    ariaLabel?: string;
    href?: string;
  }[];
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_TemplatePoweredBy {
  _type: 'TemplatePoweredBy';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Title */
  title?: string;
  /** Logos */
  logos?: {
    /** Logo image */
    logo?: RootCMSImage;
    /** Name */
    name?: string;
  }[];
  /** Body copy */
  body?: RootCMSRichText;
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface Pages_Section {
  _type: 'Section';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Description. Required. Accessibility description for screen readers. */
  description?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Modules */
  modules?: RootCMSOneOf<Pages_Divider | Pages_Spacer | Pages_Template50x50 | Pages_TemplateHeadline | Pages_TemplateImage | Pages_TemplateJumplinks | Pages_TemplatePoweredBy>[];
}

/** Generated from `/collections/Pages.schema.ts`. */
export interface PagesFields {
  /** Meta */
  meta?: {
    /** Title. Page title. */
    title?: string;
    /** Description. Description for SEO and social shares. */
    description?: string;
    /** Image. Meta image for social shares. Recommended: 1400x600 JPG. */
    image?: RootCMSImage;
  };
  /** Content */
  content?: {
    /** Modules. Compose the page by adding one or more modules. */
    modules?: RootCMSOneOf<Pages_Divider | Pages_Section | Pages_Spacer | Pages_Template50x50 | Pages_TemplateHeadline | Pages_TemplateImage | Pages_TemplateJumplinks | Pages_TemplatePoweredBy>[];
  };
}

/** Generated from `/collections/Pages.schema.ts`. */
export type PagesDoc = RootCMSDoc<PagesFields>;

/** Generated from `/components/Button/Button.schema.ts`. */
export interface ButtonFields {
  /** Button Options */
  options?: string[];
  /** Button: Label */
  label?: string;
  /** Button: ARIA Label. Optional accessibility label. */
  ariaLabel?: string;
  /** Button: URL */
  href?: string;
}

/** Generated from `/templates/Divider/Divider.schema.ts`. */
export interface DividerFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Spacer. Optional. Vertical spacing above and below the divider. */
  spacer?: {
    /** Desktop Height. Height of the spacer for the desktop layout. If blank, defaults to 80. */
    desktopHeight?: string;
    /** Tablet Height. Height of the spacer for the tablet layout. If blank, defaults to the desktop size. */
    tabletHeight?: string;
    /** Mobile Height. Height of the spacer for the mobile layout. If blank, defaults to the desktop size. */
    mobileHeight?: string;
  };
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_Divider {
  _type: 'Divider';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Spacer. Optional. Vertical spacing above and below the divider. */
  spacer?: {
    /** Desktop Height. Height of the spacer for the desktop layout. If blank, defaults to 80. */
    desktopHeight?: string;
    /** Tablet Height. Height of the spacer for the tablet layout. If blank, defaults to the desktop size. */
    tabletHeight?: string;
    /** Mobile Height. Height of the spacer for the mobile layout. If blank, defaults to the desktop size. */
    mobileHeight?: string;
  };
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_Spacer {
  _type: 'Spacer';
  /** Desktop Height. Height of the spacer for the desktop layout. If blank, defaults to 80. */
  desktopHeight?: string;
  /** Tablet Height. Height of the spacer for the tablet layout. If blank, defaults to the desktop size. */
  tabletHeight?: string;
  /** Mobile Height. Height of the spacer for the mobile layout. If blank, defaults to the desktop size. */
  mobileHeight?: string;
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_ButtonsBlock {
  _type: 'ButtonsBlock';
  /** Block Options */
  options?: string[];
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_CodeBlock {
  _type: 'CodeBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Language */
  language?: string;
  /** Code */
  code?: string;
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_CopyBlock {
  _type: 'CopyBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Title Size */
  titleSize?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_ImageBlock {
  _type: 'ImageBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
  /** Caption. Optional caption that displays below the image. */
  caption?: string;
  /** Advanced. These fields are optional. */
  advanced?: {
    /** Max Width. e.g. 300px */
    maxWidth?: string;
    /** Bordered? */
    bordered?: boolean;
  };
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_Template50x50 {
  _type: 'Template50x50';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Left Section */
  leftSection?: RootCMSOneOf<Section_ButtonsBlock | Section_CodeBlock | Section_CopyBlock | Section_ImageBlock>;
  /** Right Section */
  rightSection?: RootCMSOneOf<Section_ButtonsBlock | Section_CodeBlock | Section_CopyBlock | Section_ImageBlock>;
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_TemplateHeadline {
  _type: 'TemplateHeadline';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_TemplateImage {
  _type: 'TemplateImage';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_TemplateJumplinks {
  _type: 'TemplateJumplinks';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Description. Required. Accessibility description for screen readers. */
  description?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Title. Optional headline title. */
  title?: string;
  /** Links */
  links?: {
    label?: string;
    ariaLabel?: string;
    href?: string;
  }[];
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface Section_TemplatePoweredBy {
  _type: 'TemplatePoweredBy';
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Title */
  title?: string;
  /** Logos */
  logos?: {
    /** Logo image */
    logo?: RootCMSImage;
    /** Name */
    name?: string;
  }[];
  /** Body copy */
  body?: RootCMSRichText;
}

/** Generated from `/templates/Section/Section.schema.ts`. */
export interface SectionFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Description. Required. Accessibility description for screen readers. */
  description?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Modules */
  modules?: RootCMSOneOf<Section_Divider | Section_Spacer | Section_Template50x50 | Section_TemplateHeadline | Section_TemplateImage | Section_TemplateJumplinks | Section_TemplatePoweredBy>[];
}

/** Generated from `/templates/Spacer/Spacer.schema.ts`. */
export interface SpacerFields {
  /** Desktop Height. Height of the spacer for the desktop layout. If blank, defaults to 80. */
  desktopHeight?: string;
  /** Tablet Height. Height of the spacer for the tablet layout. If blank, defaults to the desktop size. */
  tabletHeight?: string;
  /** Mobile Height. Height of the spacer for the mobile layout. If blank, defaults to the desktop size. */
  mobileHeight?: string;
}

/** Generated from `/templates/Template50x50/Template50x50.schema.ts`. */
export interface Template50x50_ButtonsBlock {
  _type: 'ButtonsBlock';
  /** Block Options */
  options?: string[];
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/templates/Template50x50/Template50x50.schema.ts`. */
export interface Template50x50_CodeBlock {
  _type: 'CodeBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Language */
  language?: string;
  /** Code */
  code?: string;
}

/** Generated from `/templates/Template50x50/Template50x50.schema.ts`. */
export interface Template50x50_CopyBlock {
  _type: 'CopyBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Title Size */
  titleSize?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
}

/** Generated from `/templates/Template50x50/Template50x50.schema.ts`. */
export interface Template50x50_ImageBlock {
  _type: 'ImageBlock';
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
  /** Caption. Optional caption that displays below the image. */
  caption?: string;
  /** Advanced. These fields are optional. */
  advanced?: {
    /** Max Width. e.g. 300px */
    maxWidth?: string;
    /** Bordered? */
    bordered?: boolean;
  };
}

/** Generated from `/templates/Template50x50/Template50x50.schema.ts`. */
export interface Template50x50Fields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Left Section */
  leftSection?: RootCMSOneOf<Template50x50_ButtonsBlock | Template50x50_CodeBlock | Template50x50_CopyBlock | Template50x50_ImageBlock>;
  /** Right Section */
  rightSection?: RootCMSOneOf<Template50x50_ButtonsBlock | Template50x50_CodeBlock | Template50x50_CopyBlock | Template50x50_ImageBlock>;
}

/** Generated from `/templates/TemplateHeadline/TemplateHeadline.schema.ts`. */
export interface TemplateHeadlineFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Eyebrow. Small text above the title. */
  eyebrow?: string;
  /** Title. Main headline title. */
  title?: string;
  /** Body copy. Headline body copy. */
  body?: RootCMSRichText;
  /** Buttons */
  buttons?: {
    /** Button Options */
    options?: string[];
    /** Button: Label */
    label?: string;
    /** Button: ARIA Label. Optional accessibility label. */
    ariaLabel?: string;
    /** Button: URL */
    href?: string;
  }[];
}

/** Generated from `/templates/TemplateImage/TemplateImage.schema.ts`. */
export interface TemplateImageFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Image */
  image?: RootCMSImage;
}

/** Generated from `/templates/TemplateJumplinks/TemplateJumplinks.schema.ts`. */
export interface TemplateJumplinksFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Description. Required. Accessibility description for screen readers. */
  description?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Title. Optional headline title. */
  title?: string;
  /** Links */
  links?: {
    label?: string;
    ariaLabel?: string;
    href?: string;
  }[];
}

/** Generated from `/templates/TemplatePoweredBy/TemplatePoweredBy.schema.ts`. */
export interface TemplatePoweredByFields {
  /** ID. Used for deep linking, tracking, etc. */
  id?: string;
  /** Module Options. Layout and display options. */
  options?: string[];
  /** Title */
  title?: string;
  /** Logos */
  logos?: {
    /** Logo image */
    logo?: RootCMSImage;
    /** Name */
    name?: string;
  }[];
  /** Body copy */
  body?: RootCMSRichText;
}
