/**
 * Breakpoint mixins.
 *
 * Styles for a specific breakpoint:
 *
 * ```
 * @use 'breakpoints';
 * .foo {
 *   color: blue;
 *   @include breakpoints.sm() {
 *     color: red;
 *   }
 * }
 * ```
 *
 * Styles for a specific breakpoint and smaller:
 *
 * ```
 * .foo {
 *   color: blue;
 *   @include breakpoints.md-lt() {
 *     color: red;
 *   }
 * }
 * ```
 *
 * Styles for a specific breakpoint and greater:
 *
 * ```
 * .foo {
 *   color: blue;
 *   @include breakpoints.lg-gt() {
 *     color: red;
 *   }
 * }
 * ```
 *
 * Breakpoint widths can be configured in `tokens.scss`:
 *
 * ```
 * $breakpoints: (
 *   'sm': 0px,
 *   'md': 500px,
 *   'lg': 1024px,
 *   'xl': 1440px,
 *   'xxl': 2000px
 * );
 * ```
 */

@use 'sass:map';
@use 'sass:meta';
@use 'tokens';

// The breakpoint map configuration is a key-value pair where the key is the
// name of the breakpoint and the value is the minimum width for that
// breakpoint.
@if meta.variable-exists(tokens.$breakpoints) {
  $breakpoints: tokens.$breakpoints;
} @else {
  $breakpoints: (
    'sm': 0px,
    'md': 500px,
    'lg': 1024px,
    'xl': 1440px,
    'xxl': 2000px
  );
}

// Returns the configuration value for a given breakpoint name.
@function get-config-value($key) {
  @return map.get($breakpoints, $key);
}

// Since `max-width` and `min-width` media queries are equivalent to `<=` and
// `>=` respectively, the `$-breakpoint-offset-px` value is used so that two
// different breakpoints do not overlap. `0.02px` is used to avoid a rounding
// bug in Safari.
// https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// https://bugs.webkit.org/show_bug.cgi?id=178261
$-breakpoint-offset-px: 0.02px;
$breakpoint-sm-min: get-config-value('sm');
$breakpoint-sm-max: get-config-value('md') - $-breakpoint-offset-px;
$breakpoint-md-min: get-config-value('md');
$breakpoint-md-max: get-config-value('lg') - $-breakpoint-offset-px;
$breakpoint-lg-min: get-config-value('lg');
$breakpoint-lg-max: get-config-value('xl') - $-breakpoint-offset-px;
$breakpoint-xl-min: get-config-value('xl');
$breakpoint-xl-max: get-config-value('xxl') - $-breakpoint-offset-px;
$breakpoint-xxl: get-config-value('xxl');

@mixin gt($min) {
  @media (min-width: $min) {
    @content;
  }
}

@mixin lt($max) {
  @media (max-width: #{$max}) {
    @content;
  }
}

@mixin between($min, $max) {
  @media (min-width: $min) and (max-width: #{$max}) {
    @content;
  }
}

@mixin sm() {
  @include lt($breakpoint-sm-max) {
    @content;
  }
}

@mixin sm-gt() {
  @content;
}

@mixin sm-lt() {
  @include lt($breakpoint-sm-max) {
    @content;
  }
}

@mixin md() {
  @include between($breakpoint-md-min, $breakpoint-md-max) {
    @content;
  }
}

@mixin md-gt() {
  @include gt($breakpoint-md-min) {
    @content;
  }
}

@mixin md-lt() {
  @include lt($breakpoint-md-max) {
    @content;
  }
}

@mixin lg() {
  @include between($breakpoint-lg-min, $breakpoint-lg-max) {
    @content;
  }
}

@mixin lg-gt() {
  @include gt($breakpoint-lg-min) {
    @content;
  }
}

@mixin lg-lt() {
  @include lt($breakpoint-lg-max) {
    @content;
  }
}

@mixin xl() {
  @include between($breakpoint-xl-min, $breakpoint-xl-max) {
    @content;
  }
}

@mixin xl-gt() {
  @include gt($breakpoint-xl-min) {
    @content;
  }
}

@mixin xl-lt() {
  @include lt($breakpoint-xl-max) {
    @content;
  }
}

@mixin xxl() {
  @include gt($breakpoint-xxl) {
    @content;
  }
}
