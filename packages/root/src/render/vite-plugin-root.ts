import path from 'path';
import glob from 'tiny-glob';
import {RootConfig} from '../core/config';
import {isJsFile} from '../core/fsutils';

const JSX_ELEMENTS_REGEX = /jsxs?\("(\w[\w-]+\w)"/g;
const HTML_ELEMENTS_REGEX = /<(\w[\w-]+\w)/g;

export interface RootPluginOptions {
  rootDir: string;
  rootConfig: RootConfig;
}

export function pluginRoot(options?: RootPluginOptions) {
  const rootDir = options?.rootDir || process.cwd();
  let elementMap: Record<string, string>;

  async function updateElementMap() {
    elementMap = {};
    const files = await glob('./elements/**/*', {cwd: rootDir});
    files.forEach((file) => {
      const parts = path.parse(file);
      if (isJsFile(parts.base)) {
        elementMap[parts.name] = `/${file}`;
      }
    });
    console.log(JSON.stringify(elementMap));
  }

  async function getElementImport(tagname: string): Promise<string | null> {
    if (!elementMap) {
      await updateElementMap();
    }
    if (tagname in elementMap) {
      return elementMap[tagname];
    }
    return null;
  }

  return {
    name: 'vite-plugin-root',

    async transform(src: string, id: string): Promise<any> {
      if (!id.startsWith(rootDir)) {
        return null;
      }
      const moduleId = id.slice(rootDir.length);
      if (moduleId.startsWith('/elements/') && isJsFile(id)) {
        const idParts = path.parse(id);
        const deps = new Set<string>();
        const tagnames = [
          ...src.matchAll(JSX_ELEMENTS_REGEX),
          ...src.matchAll(HTML_ELEMENTS_REGEX),
        ];
        for (const match of tagnames) {
          const tagname = match[1];
          // All custom elements should contain a dash.
          if (!tagname.includes('-')) {
            continue;
          }
          // Avoid circular deps.
          if (tagname === idParts.name) {
            continue;
          }
          deps.add(tagname);
        }
        const importUrls: string[] = [];
        await Promise.all(
          Array.from(deps).map(async (tagname) => {
            const importUrl = await getElementImport(tagname);
            if (importUrl) {
              importUrls.push(importUrl);
            }
          })
        );
        if (importUrls.length > 0) {
          const importLines = importUrls
            .map((url) => `import '${url}';`)
            .join('\n');
          const code = `${src}

// autogenerated by root:
${importLines}
`;
          console.log(code);
          return {code};
        }
        return null;
      }
    },
  };
}
